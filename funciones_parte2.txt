/*
1. Crear una función Suma que reciba dos números enteros y regrese la suma de 
ambos números 
*/
CREATE FUNCTION sumarNum
(
@num int,
@num2 int
) 

RETURNS int
AS
BEGIN
declare @sumNum int;
set @sumNum = @num + @num2
		RETURN @sumNum
END

print dbo.sumarNum(1,2)

/*
2. Crear la función GetGenero la cual reciba como parámetros el curp y regrese el 
género al que pertenece 
*/
alter FUNCTION getGenero
(
@curp char(18)
) 
RETURNS char(6)
AS
BEGIN
declare @genero char(6);
set @genero = upper(SUBSTRING(@curp,11,1))
if @genero = 'm'
begin
set @genero = 'Mujer'
end
else
set @genero = 'Hombre'
        RETURN @genero 
END

select curp,
dbo.getGenero(curp) as 'genero' 
from Alumnos

/*
3. Crear la función GetFechaNacimiento la cual reciba como parámetros el curp y 
regrese la fecha de nacimiento. La fecha de nacimiento deberá completarse a 4 
dígitos, debiéndose determinar si es año dos mil o año mil novecientos 
*/
alter FUNCTION getFechaNacimiento
(
@curp varchar(18)
) 
RETURNS date
AS
BEGIN
declare @fechaNac varchar(6);
declare @fechaCon date;
set @fechaNac = SUBSTRING(@curp,5,6)
set @fechaCon = convert(date, @fechaNac)
RETURN @fechaCon
END



select curp,
dbo.getFechaNacimiento(curp) as 'fecha nacimiento' 
from Alumnos

/*
4. Crear la función GetidEstado la cual reciba como parámetros el curp y regrese el 
Id Estado con base en la siguiente tabla 
*/
alter FUNCTION getIdEstado
(
@curp char(18)
) 
RETURNS char(2)
AS
BEGIN
declare @idEstado char(2), @id int;
set @idEstado = SUBSTRING(@curp,12,2)
if @idEstado = 'AS' set @id = '1'
if @idEstado = 'BC' set @id = '2'
if @idEstado = 'BS' set @id = '3'
if @idEstado = 'CC' set @id = '4'
if @idEstado = 'CH' set @id = '5'
if @idEstado = 'CS' set @id = '6'
if @idEstado = 'CL' set @id = '7'
if @idEstado = 'CM' set @id = '8'
if @idEstado = 'DG' set @id = '9'
if @idEstado = 'GT' set @id = '10'
if @idEstado = 'GR' set @id = '11'
if @idEstado = 'HG' set @id = '12'
if @idEstado = 'JC' set @id = '13'
if @idEstado = 'MC' set @id = '14'
if @idEstado = 'MN' set @id = '15'
if @idEstado = 'MS' set @id = '16'
if @idEstado = 'NT' set @id = '17'
if @idEstado = 'NL' set @id = '18'
if @idEstado = 'OC' set @id = '19'
if @idEstado = 'PL' set @id = '20'
if @idEstado = 'QT' set @id = '21'
if @idEstado = 'QR' set @id = '22'
if @idEstado = 'SP' set @id = '23'
if @idEstado = 'SL' set @id = '24'
if @idEstado = 'SR' set @id = '25'
if @idEstado = 'TC' set @id = '26'
if @idEstado = 'TS' set @id = '27'
if @idEstado = 'TL' set @id = '28'
if @idEstado = 'VZ' set @id = '29'
if @idEstado = 'YN' set @id = '30'
if @idEstado = 'ZS' set @id = '31'
return @id 
end

select Estados.nombre, dbo.getIdEstado(curp) as idEstado from Alumnos
inner join Estados
on Alumnos.idEstadoOrigen = Estados.id

/*
5. Realizar una función llamada Calculadora que reciba como parámetros dos 
enteros y un operador (+,-,*,/,%) regresando el resultado de la operación se 
deberá cuidar de no hacer división entre cero 
*/

alter function calculadora
(
 @num int,
 @num2 int,
 @opera char(1) 
)
returns decimal(9,1)
as
begin
declare @resultado decimal(9,1)
set @resultado = (case @opera
when '+' then @num + @num2
when '-' then @num + @num2
when '*' then @num * @num2
when '/' then convert(float,@num) / nullif(@num2,0)
when '%' then @num / nullif(@num2,0)
end
)
return @resultado
end

print dbo.calculadora(1,0,'/')

/*
6. Realizar una función llamada GetHonorarios que calcule el importe a pagar a un 
determinado instructor y curso, por lo que la función recibirá como parámetro el id 
del instructor y el id del curso. 
*/

create function GetHonorarios
(
@idInstructor int,
@idCurso int
)
returns numeric(9,2)
as
begin
declare @honorarios numeric(9,2)
select @honorarios = (Instructores.cuotaHora * catCurso.horas)
from Instructores
inner join CursosInstructores
on Instructores.id = CursosInstructores.idInstructor
inner join Cursos
on CursosInstructores.idCurso = Cursos.id
inner join catCurso
on Cursos.idCatCurso = catCurso.id
where CursosInstructores.idInstructor = @idInstructor
return @honorarios
end

select dbo.getHonorarios(2,3) honorarios

/*
7. Crear la función GetEdad la cual reciba como parámetros la fecha de nacimiento y 
la fecha a la que se requiere realizar el cálculo de la edad. Los años deberán ser 
cumplidos, considerando mes y día
*/

create function GetEdad
(
@fechaNa date,
@fechaCal date
)
returns int
as
begin
declare @edad int
set @edad = datediff(year,
iif((month(@fechaNa) > month(@fechaCal))
or(day(@fechaNa)> day(@fechaCal)),
dateadd(year,1,@fechaNa),@fechaNa),@fechaCal)
return @edad
end

select dbo.GetEdad('1997-02-19','2024-02-19') as edad

/*
8. Crear la función Factorial la cual reciba como parámetros un número entero y 
regrese como resultado el factorial. 
*/
alter function factorial
(
@n bigint
)
returns bigint
as
begin
declare @fac bigint
if @n <=1
set @fac = 1
else
set @fac = @n * dbo.factorial(@n -1)
return @fac
end

select dbo.factorial(7) as factorial

/*
9. Crear la función ReembolsoQuincenal la cual reciba como parámetros un 
SueldoMensual y regrese como resultado el Importe de Reembolso quincenal, 
considerando que el importe total a reembolsar es igual a dos meses y medio de 
sueldo, y el periodo de reembolso es de 6 meses 
*/
alter function dbo.ReembolsoQuincena
(
@sueldoMensual decimal(9,2)
)
returns decimal(9,2)
as
begin
return (@sueldoMensual * 2.5)/12
end

SELECT dbo.ReembolsoQuincena(30000) as rembolso

/*
10. Realizar una función que calcule el impuesto que debe pagar un instructor para un 
determinado curso. De tal manera que la función recibirá id de un instructor y el id 
del curso  correspondiente. 

El cálculo del impuesto se realiza de la siguiente forma:  
Determinar el porcentaje que aplicará dependiendo del estado de nacimiento 
Chiapas = 5 % 
Sonora = 10 % 
Veracruz = 7 % 
El resto del país 8 % 
El impuesto se obtendrá aplicando el porcentaje al total de la cuota por hora por la 
cantidad de horas del curso 
El Estado de Origen se obtendrá de la posición 12 y 13 del curp de acuerdo con la 
siguiente tabla
*/
create function dbo.impuesto
(
@idInstructor smallint,
@idCurso smallint
)
returns numeric
as
begin
declare @sueldo numeric(9,2)
declare @impuesto numeric(9,2)
select @sueldo = (i.cuotaHora*cc.horas)
from Instructores i
inner join CursosInstructores ci
on i.id = ci.idCurso
inner join Cursos c
on ci.idCurso = c.id
inner join catCurso cc
on c.idCatCurso = cc.id
where ci.id = @idInstructor;
set @impuesto = case SUBSTRING((select curp from Instructores where Instructores.id = @idInstructor ),12,2)
when 'CS' then @sueldo - (@sueldo*.05)
when 'SR' then @sueldo -(@sueldo* .10)
when 'VZ' then @sueldo - (@sueldo* .07)
else 
@sueldo - (@sueldo* .08)
end
return @impuesto
end

select dbo.impuesto(1,4) as impuesto


/*
11. Haciendo uso de la función GetEdad, obtener una relación de alumnos con la edad 
a la fecha de inscripción, y la edad actual. De aquellos alumnos que actualmente 
tengan más de 25 años. 
*/
alter function listaAlumnos
(
)
returns @listaAlumnos table
(
# smallint identity(1,1),
Nombre varchar(60),
correo varchar(60),
telefono nchar(10),
curp char(18),
sueldoMensual decimal(9,2),
edadInscripcion int,
edadActual int
)
as
begin
insert into @listaAlumnos
	select distinct concat(a.nombre,' ',a.primerApellido,' ',a.segundoApellido),
	a.correo,
	a.telefono,
	a.curp,
	a.sueldoMensual,
	dbo.getEdad(a.fechaNacimiento,ca.fechaInscripcion) as 'edad inscripcion',
	dbo.GetEdad(a.fechaNacimiento,CURRENT_TIMESTAMP) as 'edad actual'
	from Alumnos a
	inner join CursosAlumnos ca
	on a.id=ca.idAlumno
	where dbo.getEdad(a.fechaNacimiento,CURRENT_TIMESTAMP)>24
return
end

select * from dbo.listaAlumnos();

/*
12. Realizar una función que determine el porcentaje a descontar en los reembolsos, 
con base a la cantidad de meses en que se realizará el reembolso y el sueldo 
mensual logrado, de acuerdo al siguiente procedimiento: 

a. El porcentaje de descuento será en función de la cantidad de 
mensualidades en que se realizará el reembolso. 
b. La cantidad máximo de meses para realizar el reembolso es de 6 meses 
c. El porcentaje máximo de descuento a otorgar será el que resulte el sueldo 
mensual entre 1,000 
i. 
Ejemplo : Si el sueldo mensual es de 20,000 pesos el descuento 
será del 20 % 
d. El porcentaje máximo de descuento será otorgado si el reembolso total se 
realiza cuando le corresponde efectuar la primera parcialidad de dicho 
reembolso 
e. Los porcentaje de descuento a otorgar  disminuirá inversamente 
proporcional a la cantidad de meses en que se cubrirá totalmente el 
reembolso, de tal forma que si el reembolso se cubre  en la mitad del 
periodo máximo (3 meses = 6 meses /2), el porcentaje a descontar será la 
mitad del porcentaje máximo ( en el ejemplo 10% = 20% / 2), y si el 
reembolso se realiza en el máximo del plazo, el descuento a otorgar será 
cero.
*/
drop function dbo.descuento


ALTER FUNCTION descuento(
@sueldo decimal(9,1), 
@mes INT
)
 RETURNS varchar(10)
 AS
 BEGIN
	DECLARE @porcentaje decimal(9,1);
	set @porcentaje = @sueldo/1000
	IF @mes = 2
	SET @porcentaje =@porcentaje*.75
	IF @mes = 3
	SET @porcentaje = @porcentaje*.50
	IF @mes = 4
	SET @porcentaje = @porcentaje*.25
	IF @mes >= 5
	SET @porcentaje = 0
RETURN @porcentaje
END
select dbo.descuento(30000,5) AS 'DESCUENTO % '
/*
13. Hacer una función que convierta a mayúsculas la primera letra de cada palabra de 
una cadena de caracteres recibida. 
*/
create function PrimMayus(@Texto as varchar(8000))
returns varchar(8000)
as
begin
  declare @isMayus bit;
  declare @contenedor varchar(8000);
  declare @i int;
  declare @c char(1);

  if @Texto is null
    return null;

  select @isMayus = 1, @i = 1, @Ret = '';

  while (@i <= len(@Texto))
    select @c = substring(@Text, @i, 1),
      @contenedor = @contenedor + case when @isMayus = 1 then UPPER(@c) else LOWER(@c) end,
      @isMayus = case when @c like '[a-zA-Z]' then 0 else 1 end,
      @i = @i + 1
  return @contenedor
end

/*
14. Hacer una función valuada en tabla que obtenga la tabla de amortización de los 
Reembolsos quincenales que un participante tiene que realizar en 6 meses
*/
create function amortizacion
(
@idAlumno decimal(9,2)
)
returns @tablaTemporal table
(
quincena int,
saldoAnterior decimal(9,2),
pago decimal(9,2),
saldoNuevo decimal(9,2)
)
as
begin
declare @quincena int,
@saldoAnterior decimal(9,2),
@pago decimal(9,2),
@saldoNuevo decimal(9,2);
set @quincena = 1;
set @saldoAnterior = (select (a.sueldoMensual*2.5) from Alumnos a where a.id = @idAlumno);
set @pago =(select dbo.ReembolsoQuincena(a.sueldoMensual) from Alumnos a where a.id = @idAlumno)
set @saldoNuevo = (select @saldoAnterior - dbo.ReembolsoQuincena(a.sueldoMensual) from Alumnos a where a.id = @idAlumno)
while @quincena <= 12
begin
insert into @tablaTemporal
select @quincena, @saldoAnterior, @pago, @saldoNuevo;
set @quincena = @quincena + 1;
set @saldoAnterior = @saldoNuevo;
set @saldoNuevo = @saldoAnterior - @pago
end
return
end


select * from dbo.amortizacion(1)

/*
2. Hacer una función valuada en tabla que obtenga la tabla de amortización de los 
préstamos posibles que se le pueden hacer a un instructor.  
La función recibirá como parámetro el id del instructor  
El importe del préstamo será 200 veces la cuota por hora 
El porcentaje de interés será el 24% anual cuando la cuota por hora sea superior a 
200 
Para el resto será de 18% 
El pago mensual será el equivalente a 25 horas 
*/
create function tabPrestamoInstructor
(
@idInstructor decimal(9,2)
)
returns @tablaTemporal table
(
cuotaHora decimal(9,2),
saldoAnterior decimal(9,2),
pago decimal(9,2),
saldoNuevo decimal(9,2)
)
as
begin
declare @quincena int,
@saldoAnterior decimal(9,2),
@pago decimal(9,2),
@saldoNuevo decimal(9,2);
set @quincena = 1;
set @saldoAnterior = (select (a.sueldoMensual*2.5) from Alumnos a where a.id = @idAlumno);
set @pago =(select dbo.ReembolsoQuincena(a.sueldoMensual) from Alumnos a where a.id = @idAlumno)
set @saldoNuevo = (select @saldoAnterior - dbo.ReembolsoQuincena(a.sueldoMensual) from Alumnos a where a.id = @idAlumno)
while @quincena <= 12
begin
insert into @tablaTemporal
select @quincena, @saldoAnterior, @pago, @saldoNuevo;
set @quincena = @quincena + 1;
set @saldoAnterior = @saldoNuevo;
set @saldoNuevo = @saldoAnterior - @pago
end
return
end
